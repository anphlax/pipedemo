# This workflow will run continuous be executed on every open pull request
# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

name: Build, Test and Deploy

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}


on:
  # Ensure this workflow is reusable
  # https://docs.github.com/en/actions/using-workflows/reusing-workflows#creating-a-reusable-workflow
  workflow_call:

  # Run on open pull requests with target branch "main"
  pull_request:
    branches: [ "main" ]

  # Run on push to main
  # Run if a tag is pushed
  push:
    branches: [ "main" ] # TODO: For testing only
    tags:
      # PROD: Run if semver tag without special fixes is pushed
      - 'v[0-9]+.[0-9]+.[0-9]+'
      # PREPROD: Run if semver tag with special fixes is pushed
      - 'v[0-9]+.[0-9]+.[0-9]+-PRE'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    # Build and test steps
    # https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven
    - name: Clean Build with Maven
      run: mvn -B clean package --file pom.xml

    - name: Copy JAR Artifact
      run: mkdir artifacts && cp target/*.jar artifacts/

    - name: Contract Testing
      run: echo "Contract Testing using Spring Cloud Contract..." && sleep 1
    
    - name: SonarCloud Emulation
      run: echo "EMULATE Running SonarCloud...." && sleep 1

      # Upload the JAR to a shared Storage
      # Allows the artifact to be used in an image
      # Ensure the artifact is the same across envs
    - uses: actions/upload-artifact@v3
      with:
        name: jarpackage
        path: artifacts/

  image:
    runs-on: ubuntu-latest
    needs:
      - build
    if: github.event_name != 'pull_request'
    permissions: write-all # automated release via api needs many permissions
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: jarpackage

      # https://github.com/docker/setup-qemu-action
      - name: Set up QEMU (Multiplattform Build Support)
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      ### TODO: Login to AWS ECR, allow push to ECR
      #      - name: Configure AWS credentials
      #        uses: aws-actions/configure-aws-credentials@v1
      #        with:
      #          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #          aws-region: ${{ env.AWS_REGION }}
      #
      #      - name: Login to Amazon ECR
      #        id: login-ecr
      #        uses: aws-actions/amazon-ecr-login@v1

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          # The basename of the image
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          # ADD AWS REGISTRY BASE URL HERE: EXAMPLE: ${{ env.AWS_ECR_REGISTRY }}/${{ env.IMAGE_NAME }}


          # How to manage tags with the metadata module:
          # https://docs.docker.com/build/ci/github-actions/manage-tags-labels/
          # Important: https://github.com/docker/metadata-action
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=edge,branch=main
            type=semver,pattern={{version}}
            type=sha,prefix=commit-,format=short
            

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Github.Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max


  # Deploy to dev, when...
  # ...continuous integration steps done.
  # ...build artifact successful.
  # ...a PR was merged.
  deploy-dev:
    name: Deploy development
    runs-on: ubuntu-latest
    needs:
      - build
      - image
    if: github.event_name != 'pull_request' && github.event.ref != 'ref/tags/v*'
    permissions:
      contents: read
      packages: write
    environment: dev
    steps:
      # Use the image, read config map and deploy to Kubernetes...
      - name: DEMO Alter deployment config and apply it in Kubernetes...
        id: task-def
        run: |
          echo "# get kubeconfig for this context..."
          echo "kubectl config use-context ..."
          echo "# manage namespace"
          echo "kubectl create namespace $NAMESPACE_SLUG --dry-run=client -o yaml | kubectl apply -f -"
          echo "export DOCKER_IMAGE_TAG=$CI_COMMIT_SHORT_SHA"
          echo "# apply the deployment"
          echo "cat ./deployment/develop.yaml | envsubst | kubectl apply -f -"


  announce-dev:
    needs: deploy-dev
    uses: ./.github/workflows/announce.yml
    secrets: inherit


  # Deploy to preprod, when...
  # ...continuous integration steps done.
  # ...build artifact successful.
  # ...a PRE suffixed TAG was pushed.
  deploy-preprod:
    runs-on: ubuntu-latest
    needs:
      - build
      - image
    if: github.event.ref == 'ref/tags/v[0-9]+.[0-9]+.[0-9]+-PRE'
    permissions:
      contents: read
      packages: write
    environment: preprod
    steps:
      - name: create pre-release
        uses: "actions/github-script@v6"
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
          script: |
            try {
              const response = await github.rest.repos.createRelease({
                draft: false,
                generate_release_notes: true,
                name: process.env.RELEASE_TAG,
                owner: context.repo.owner,
                prerelease: true,
                repo: context.repo.repo,
                tag_name: process.env.RELEASE_TAG,
              });

              core.exportVariable('RELEASE_ID', response.data.id);
              core.exportVariable('RELEASE_UPLOAD_URL', response.data.upload_url);
            } catch (error) {
              core.setFailed(error.message);
            }

      # Use the image, read config map and deploy to Kubernetes...
      - name: modify deployment config and deploy to k8s cluster
        id: task-def
        run: |
          echo "# get kubeconfig for this context..."
          echo "kubectl config use-context ..."
          echo "# manage namespace"
          echo "kubectl create namespace $NAMESPACE_SLUG --dry-run=client -o yaml | kubectl apply -f -"
          echo "export DOCKER_IMAGE_TAG=$CI_COMMIT_SHORT_SHA"
          echo "# apply the deployment"
          echo "cat ./deployment/develop.yaml | envsubst | kubectl apply -f -"

  announce-preprod:
    needs: deploy-preprod
    uses: ./.github/workflows/announce.yml
    secrets: inherit

  # Deploy to preprod, when...
  # ...continuous integration steps done.
  # ...build artifact successful.
  # ...a regular semvar tag was pushed.
  deploy-prod:
    runs-on: ubuntu-latest
    needs:
      - build
      - image
    if: github.event.ref == 'ref/tags/v[0-9]+.[0-9]+.[0-9]+'
    permissions:
      contents: read
      packages: write
    environment: prod
    steps:
      - name: create release
        uses: "actions/github-script@v6"
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
          script: |
            try {
              const response = await github.rest.repos.createRelease({
                draft: false,
                generate_release_notes: true,
                name: process.env.RELEASE_TAG,
                owner: context.repo.owner,
                prerelease: false,
                repo: context.repo.repo,
                tag_name: process.env.RELEASE_TAG,
              });

              core.exportVariable('RELEASE_ID', response.data.id);
              core.exportVariable('RELEASE_UPLOAD_URL', response.data.upload_url);
            } catch (error) {
              core.setFailed(error.message);
            }
            

      # Use the image, read config map and deploy to Kubernetes...
      - name: DEMO Alter deployment config and apply it in Kubernetes...
        id: task-def
        run: |
          echo "# get kubeconfig for this context..."
          echo "kubectl config use-context ..."
          echo "# manage namespace"
          echo "kubectl create namespace $NAMESPACE_SLUG --dry-run=client -o yaml | kubectl apply -f -"
          echo "export DOCKER_IMAGE_TAG=$CI_COMMIT_SHORT_SHA"
          echo "# apply the deployment"
          echo "cat ./deployment/develop.yaml | envsubst | kubectl apply -f -"

  # Announce to external messenger services using a reusable workflow call in this job
  announce-prod:
    needs: deploy-prod
    uses: ./.github/workflows/announce.yml
    secrets: inherit
